const fetch = require('node-fetch'); const fs = require('fs'); const path = require('path'); const encodedAuthor = 'U2lhbVRoZUZyb2c='; if (Buffer.from(encodedAuthor, 'base64').toString('utf-8') !== 'SiamTheFrog') { throw new Error("Don't change author randi.."); } module.exports = { config: { name: 'cp', version: '1.2.0', author: 'SiamTheFrog', countDown: 0, role: 0, category: 'entertainment', shortDescription: 'Fetches random captions and anime images, and allows users to add their own images.', longDescription: 'Responds with a random caption and an anime image, and allows users to add their own image via /cp add.', guide: { en: '{pn} to get a random image and caption. Use {pn} add to add your own image.', }, }, onStart: async function ({ api, event, message, args }) { const senderID = event.senderID; const userImagesPath = path.join(__dirname, 'userImages.json'); let userImages = []; if (fs.existsSync(userImagesPath)) { userImages = JSON.parse(fs.readFileSync(userImagesPath)); } if (args[0] === 'add') { if (event.messageReply && event.messageReply.attachments.length > 0) { const imageUrl = event.messageReply.attachments[0].url; userImages.push(imageUrl); fs.writeFileSync(userImagesPath, JSON.stringify(userImages, null, 2)); return message.reply('Your image has been added successfully.'); } else { return message.reply('Please reply with an image to add.'); } } if (!global.usedImages) { global.usedImages = new Set(); } try { const response = await fetch("https://raw.githubusercontent.com/Siamfroggy/Bangla-Caption-Frog/main/Caption-Frog-Api"); if (!response.ok) throw new Error("Network response was not ok"); const captions = await response.text(); const captionArray = captions.split('\n').filter(Boolean); const randomCaption = captionArray[Math.floor(Math.random() * captionArray.length)]; const imageResponse = await fetch("https://raw.githubusercontent.com/Siamfroggy/Anime-Image-frog/main/Anime-image-frogApiUrl.json"); if (!imageResponse.ok) throw new Error("Network response was not ok"); const imageData = await imageResponse.json(); const images = imageData.images; const allImages = [...images, ...userImages]; let availableImages = allImages.filter(image => !global.usedImages.has(image)); if (availableImages.length === 0) { global.usedImages.clear(); availableImages = allImages; } const randomImage = availableImages[Math.floor(Math.random() * availableImages.length)]; global.usedImages.add(randomImage); const siam = await global.utils.getStreamFromURL(randomImage); const Body = `Caption: ${randomCaption}`; message.reply({ body: Body, attachment: siam }, event.threadID); } catch (error) { console.error("Error fetching data: ", error); message.reply("Unable to fetch captions or images at the moment. Please try again later."); } }, }; const authorName = module.exports.config.author; if (authorName !== 'SiamTheFrog') { message.reply("Don't change author randi!"); return; }
